import networkx as nx
import pcst_fast
import graphilp.network.reductions.pcst_fast_interface_temp as pcst
from gurobipy import Model, GRB, quicksum
import gurobipy
import time
from graphilp.network import pcst_linear as pl
from graphilp.imports import networkx as imp_nx
from graphilp.imports import readFile as gf
from graphilp.network import pcst_linear as stp
from graphilp.network.reductions import pcst_basic_reductions as br
from graphilp.network.reductions import pcst_voronoi as vor
from graphilp.network.reductions import pcst_utilities as pu
from graphilp.network.reductions import pcst_dualAscent as da

if __name__ == '__main__':
    l = [(3105, 3123), (3154, 3105), (3154, 3170), (3195, 3154), (3195, 3220), (3213, 3195), (3220, 3270), (3220, 3229), (3270, 3275), (3275, 3312), (3275, 3285), (3312, 3317), (3317, 3349), (3317, 3323), (3349, 3367), (3350, 3368), (3367, 3366), (3367, 3379), (3368, 3408), (3379, 3350), (3408, 3517), (3499, 3467), (3504, 3499), (3517, 3571), (3571, 3604), (3604, 3610), (3610, 3625), (3625, 3651), (3651, 3679), (3675, 3504), (3679, 3700), (3679, 3755), (3700, 3675), (3700, 3704), (3704, 3726), (5833, 3213)]

    z = [(3105, 3154), (3123, 3105), (3154, 3195), (3154, 3170), (3195, 3220), (3195, 3213), (3220, 3270), (3220, 3229), (3270, 3275), (3275, 3312), (3275, 3285), (3312, 3317), (3317, 3349), (3317, 3323), (3349, 3367), (3367, 3366), (3367, 3379), (3379, 3427), (3427, 3454), (3454, 3494), (3494, 3535), (3499, 3467), (3504, 3499), (3535, 3583), (3583, 3625), (3625, 3651), (3651, 3679), (3675, 3504), (3679, 3700), (3679, 3755), (3700, 3675), (3700, 3704), (3704, 3726), (5833, 3123)]

    x = set()
    term = [3123, 3170, 3213, 3229, 3285, 3323, 3366, 3467, 3726, 3755]
    for (u, v) in l:
        if (u, v) not in z and (v, u) not in z:
            print((u, v))
            x.add(u)
            x.add(v)
    print(list(x))

    for t in term:
        incl = False
        for (u,v) in l:
            if t == u or t == v:
                incl =True
        if not incl:
            print(t)

    first =  [(3105, 3123), (3154, 3105), (3154, 3170), (3195, 3154), (3195, 3213), (3220, 3195), (3220, 3229), (3270, 3220), (3275, 3270), (3275, 3285), (3312, 3275), (3317, 3312), (3317, 3323), (3349, 3317), (3367, 3349), (3367, 3366), (3379, 3367), (3427, 3379), (3454, 3427), (3467, 3499), (3494, 3454), (3499, 3504), (3504, 3675), (3535, 3494), (3583, 3535), (3625, 3583), (3651, 3625), (3675, 3700), (3679, 3651), (3679, 3755), (3686, 3732), (3700, 3679), (3700, 3704), (3703, 3686), (3704, 3726), (3715, 3703), (3725, 3715), (3731, 3725), (3732, 3765), (3741, 3731), (3747, 3741), (3754, 3747), (3761, 3754), (3764, 3761), (3765, 3804), (3769, 3764), (3775, 3769), (3782, 3775), (3789, 3782), (3795, 3789), (3803, 3795), (3804, 3813), (3811, 3803), (3813, 3818), (3817, 3811), (3818, 3845), (3826, 3817), (3845, 3877), (3855, 3826), (3877, 3855), (5833, 3467)]


    more_nodes = [3368, 3625, 5833, 3213, 3408, 3379, 3571, 3604, 3350, 3610, 3517]
    for t in more_nodes:
        incl = False
        for (u,v) in first:
            if t == u or t == v:
                incl =True
        if incl:
            print(t)

    G = nx.DiGraph()

    G.add_nodes_from([
        (0, {'prize': 6}),
        (1, {'prize': 0}),
        (2, {'prize': 5})

    ])

    G.add_edges_from([ (0, 2, {'weight': 13})
                      ])

    t = [terminal for terminal in G.nodes() if G.nodes[terminal]['prize'] > 0]
    print("Terminals:", t)
    cut_value, partition = nx.algorithms.flow.minimum_cut(G, 0, 2, capacity='weight')

    print(G.edges[(0, 2)]['weight'])

    solution = [(34, 1), (36                                                                                   , 34), (39, 36), (53, 39), (182, 1), (228, 229), (229, 240), (233, 228), (234, 1), (240, 246), (246, 249), (249, 234), (250, 249), (262, 294), (287, 1), (294, 296), (296, 299), (299, 305), (305, 327), (313, 250), (320, 313), (327, 333), (328, 320), (333, 334), (334, 344), (335, 328), (344, 335), (348, 344), (368, 348), (376, 368), (385, 376), (390, 385), (400, 403), (402, 400), (403, 409), (406, 402), (407, 390), (409, 432), (410, 406), (416, 407), (419, 410), (429, 416), (431, 429), (432, 431), (435, 419), (446, 435), (466, 446), (489, 466), (509, 489), (522, 509), (523, 509), (527, 522), (529, 523), (557, 527), (560, 557), (634, 641), (641, 1), (738, 53), (739, 262), (740, 529), (741, 560), (742, 634), (743, 313), (744, 233), (745, 466), (746, 287), (747, 182)]
    for i in solution:
        s = str(i[0]) + "\t" + str(i[1])

    test1 = [(3408, 3517), (3604, 3598), (3610, 3625), (3652, 3610), (3625, 3651), (3312, 3275), (3598, 3626), (3665, 3652), (3641, 3665), (3626, 3641), (3368, 3408), (3517, 3571), (3571, 3604), (3350, 3368), (3379, 3350), (3675, 3504), (3700, 3675), (3700, 3704), (3504, 3499), (3499, 3467), (3651, 3679), (3105, 3123), (3154, 3105), (3154, 3170), (3195, 3154), (3195, 3213), (3220, 3195), (3220, 3229), (3270, 3220), (3275, 3270), (3275, 3285), (3317, 3312), (3317, 3323), (3349, 3317), (3367, 3379), (3367, 3349), (3679, 3700), (3679, 3755), (3704, 3726), (3366, 3367)]
    test2 = [(3679, 3755), (3494, 3535), (3675, 3504), (3379, 3427), (3367, 3366), (3700, 3675), (3154, 3170), (3349, 3367), (3317, 3323), (3427, 3454), (3535, 3583), (3195, 3154), (3154, 3105), (3195, 3213), (3454, 3494), (3220, 3195), (3504, 3499), (3367, 3379), (3499, 3467), (3275, 3312), (3651, 3679), (3317, 3349), (3220, 3229), (3105, 3123), (3312, 3317), (3704, 3726), (3583, 3625), (3275, 3285), (3270, 3220), (3270, 3275), (3700, 3704), (3625, 3651), (3679, 3700)]
    sol = []
    p = set()
    for (u, v) in test2:
        if (u, v) not in test1 and (v, u) not in test1:
            sol.append ((u, v))
            print((u, v))
            p.add(u)
            p.add(v)
    print(list(p))
    print(sol)
    print(25357 - 9562)
    print(75850 - 60055)